{"version":3,"sources":["components/Cats.js","App.js","actions/index.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Cats","props","catPic","className","Image","src","alt","thumbnail","connect","state","isLoading","cats","error","getCats","dispatch","type","axios","defaults","headers","common","process","get","then","res","payload","data","catch","err","response","Button","variant","disabled","Spinner","as","animation","size","role","aria-hidden","onClick","map","cat","key","id","url","Boolean","window","location","hostname","match","initalState","store","createStore","action","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAaeA,MAVf,SAAcC,GACb,IACUC,EAAUD,EAAVC,OACP,OACI,yBAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,CAAOC,IAAKH,EAAQI,IAAI,GAAGC,WAAS,MCiChD,IAQeC,eARS,SAAAC,GACtB,MAAO,CACLC,UAAWD,EAAMC,UACjBC,KAAMF,EAAME,KACZC,MAAOH,EAAMG,SAIuB,CAAEC,QC9CnB,kBAAM,SAAAC,GAEzBA,EAAS,CAACC,KAAM,aAChBC,IAAMC,SAASC,QAAQC,OAAO,aAAeC,uCAE7CJ,IAAMK,IAAI,uDACTC,MAAK,SAAAC,GACFT,EAAS,CAACC,KAAM,UAAWS,QAASD,EAAIE,UAE3CC,OAAM,SAAAC,GACHb,EAAS,CAACC,KAAM,UAAWS,QAASG,EAAIC,iBDoCjCpB,EArCf,SAAaP,GAAQ,IACXS,EAAoCT,EAApCS,UAAWC,EAAyBV,EAAzBU,KAAaE,GAAYZ,EAAnBW,MAAmBX,EAAZY,SAEhC,OACE,yBAAKV,UAAU,OACb,uDACEQ,IAASD,GAAa,sFAEtBA,EAGA,kBAACmB,EAAA,EAAD,CAAQ1B,UAAU,SAAS2B,QAAQ,UAAUC,UAAQ,GAArD,eACE,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,OACVC,KAAK,KACLC,KAAK,SACLC,cAAY,UARhB,kBAACR,EAAA,EAAD,CAAQ1B,UAAU,SAASmC,QAAS,kBAAMzB,KAAWiB,QAAQ,WAA7D,wBAYCnB,IAASD,GACR,yBAAKP,UAAU,aACZQ,EAAK4B,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAIE,GAAIxC,OAAQsC,EAAIG,cEvBxCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCjBAC,EAAc,CAChBvC,WAAW,EACXC,KAAM,KACNC,MAAO,ICQLsC,EAAQC,aDLS,WACtB,IADuB1C,EACxB,uDADgCwC,EAAaG,EAC7C,uCACG,OAAOA,EAAOrC,MAEV,IAAK,WACD,OAAO,eACAN,EADP,CAEIC,WAAW,IAElB,IAAK,UACD,OAAO,eACAD,EADP,CAEIC,WAAW,EACXC,KAAMyC,EAAO5B,UAErB,IAAK,UACD,OAAO,eACAf,EADP,CAEIC,WAAW,EACXE,MAAOwC,EAAO5B,UAEvB,QACI,OAAOf,KCjBiB4C,YAAgBC,IAAOC,MAE1DC,IAASC,OAAO,kBAAC,IAAD,CAAUP,MAAOA,GAAO,kBAAC,EAAD,OAAoBQ,SAASC,eAAe,SFqH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.64aa8e26.chunk.js","sourcesContent":["import React from 'react';\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nfunction Cats(props)\r\n{\r\n    const {catPic} = props;\r\n    return(\r\n        <div className='cat-img'>\r\n            <Image src={catPic} alt='' thumbnail/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cats;","import React from 'react';\nimport './App.css';\n\nimport { connect } from 'react-redux';\nimport { getCats } from './actions';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport Cats from './components/Cats';\n\nfunction App(props) {\n  const { isLoading, cats, error, getCats } = props;\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to the Cat App</h1>\n      {!cats && !isLoading && <h3>Let's fill the page with cats!! Press the button below</h3>}\n     \n      {!isLoading ?\n        <Button className='button' onClick={() => getCats()} variant='primary'>Let's load some cats</Button>\n        :\n        <Button className='button' variant='primary' disabled>Loading Cats\n          <Spinner\n            as=\"span\"\n            animation=\"grow\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          />\n        </Button>\n      }\n        {cats && !isLoading &&(\n          <div className='container'>\n            {cats.map(cat => <Cats key={cat.id} catPic={cat.url}/>)}\n          </div>)}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.isLoading,\n    cats: state.cats,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { getCats })(App);\n","//actions file \r\nimport axios from 'axios';\r\n\r\nexport const getCats = () => dispatch =>\r\n{\r\n    dispatch({type: 'GET_CATS'});\r\n    axios.defaults.headers.common['x-api-key'] = process.env.REACT_APP_API_KEY;\r\n\r\n    axios.get('https://api.thecatapi.com/v1/images/search?limit=20')\r\n    .then(res => {\r\n        dispatch({type: 'SUCCESS', payload: res.data});\r\n    })\r\n    .catch(err => {\r\n        dispatch({type: 'FAILURE', payload: err.response});\r\n    });\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//Reducers file for our app\r\nconst initalState = {\r\n    isLoading: false,\r\n    cats: null,\r\n    error: ''\r\n};\r\n\r\nexport const reducer = (state = initalState, action) => \r\n{\r\n   switch(action.type)\r\n   {\r\n       case 'GET_CATS':\r\n           return {\r\n               ...state,\r\n               isLoading: true\r\n           }\r\n        case 'SUCCESS':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                cats: action.payload\r\n            }\r\n        case 'FAILURE':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload\r\n            }           \r\n       default:\r\n           return state;\r\n   }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux'\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport {reducer} from './reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}